{"version":3,"sources":["modules/sidebar/sidebar-proptypes.js","modules/sidebar/sidebar-selectors.js","modules/sidebar/sidebar-controller.jsx","modules/sidebar/sidebar-constants.js","data/vectors.js","data/linear-spaces.js","data/index.js","modules/sidebar/sidebar-reducer.js","modules/homepage/homepage-controller.jsx","modules/homepage/homepage-constants.js","modules/dictation-list/dictation-list-selectors.js","modules/dictation-list/dictation-list-constants.js","modules/dictation-list/dictation-list-controller.jsx","modules/dictation-list/dictation-list-proptypes.js","App.jsx","reducers.js","modules/dictation-list/dictation-list-reducer.js","index.jsx"],"names":["SidebarLink","PropTypes","shape","name","string","isRequired","label","href","arrayOf","getSidebarLinksList","createSelector","store","sidebarState","get","SidebarComponent","react","ListGroup","Item","react_router_dom","to","this","props","linksList","map","link","key","concat","React","mapStateToProps","createStructuredSelector","SidebarController","connect","vectors","questionsList","linearSpaces","dictationList","_dictationList","Object","defineProperty","initialValues","dictation","omit","HomepageController","_React$PureComponent","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","Container","Row","Col","getDictationDataByRoute","ownProps","dictationStore","pageName","header","shuffle","DictationListComponent","dictationData","length","question","DictationListController","App","fluid","basename","process","xs","react_router","exact","path","component","Homepage","DictationList","reducers","_reducers","undefined","createStore","combineReducers","ReactDOM","render","react_default","a","createElement","es","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.832b2fd2.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst SidebarLink = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  href: PropTypes.string.isRequired,\n});\n\nexport const SidebarPropTypes = {\n  linksList: PropTypes.arrayOf(\n    SidebarLink\n  )\n}","import { createSelector } from 'reselect';\nimport { get } from 'lodash';\nimport { SIDEBAR_STORE_KEY } from './sidebar-constants';\n\nconst getSidebarStore = store => store[SIDEBAR_STORE_KEY];\n\nexport const getSidebarLinksList = createSelector(\n  getSidebarStore,\n  (sidebarState) => get(sidebarState, 'linksList', [])\n);\n","import * as React from 'react';\nimport { connect } from 'react-redux'\nimport { ListGroup  } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect';\nimport { SidebarPropTypes } from './sidebar-proptypes';\nimport { getSidebarLinksList } from './sidebar-selectors';\nimport { TO_MAIN_PAGE_LABEL } from './sidebar-constants';\n\nclass SidebarComponent extends React.PureComponent {\n  static propTypes = SidebarPropTypes;\n  render() {\n    return (\n      <ListGroup>\n        <ListGroup.Item>\n          <Link to=\"/\">\n            {TO_MAIN_PAGE_LABEL}\n          </Link>\n        </ListGroup.Item>\n\n        {this.props.linksList.map(link => (\n          <ListGroup.Item key={link.name}>\n            <Link to={`/${link.href}`}>\n              {link.label}\n            </Link>\n          </ListGroup.Item>\n        ))}\n      </ListGroup>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  linksList: getSidebarLinksList,\n});\n\nexport const SidebarController = connect(\n  mapStateToProps\n)(SidebarComponent);\n","export const TO_MAIN_PAGE_LABEL = 'На главную';\nexport const SIDEBAR_STORE_KEY = 'sidebar';","export const vectors = {\n  name: 'vectors',\n  label: 'Векторы',\n  href: 'vectors',\n  questionsList: [\n    'Определить площадь треугольника по 3 точкам',\n    'Найти координаты вектора c, перпендикулярного двум заданным векторам, зная его длину',\n    'Определить объём пирамиды',\n  ],\n}","export const linearSpaces = {\n  name: 'linear-spaces',\n  label: 'Линейные пространства',\n  href: 'linear-spaces',\n  questionsList: [\n    'Проверить линейную независимость',\n    'Исследовать систему векторов на линейную зависимость',\n    'Найти уравнение, определяющее подпространство',\n    'Определить базис подпространства, если подпространство задано однородной системой уравнений',\n    'Определить базис и разложение остальных векторов по базису для линейной оболочки',\n    'Определить базис суммы и базис пересечения подпространств',\n    'Определить матрицу перехода от базиса к базису',\n    'Определить координаты вектора в другом базисе',\n    'Определить матрицу линейного оператора в другом базисе',\n    'Определить матрицу линейного оператора отображающего векторное произведение в заданном базисе для пространства геометрических векторов',\n    'Определить матрицу линейного оператора в базисе, представленном матрицами',\n    'Найти матрицу линейного оператора, переводящего векторы  от a к b в том же базисе, в котором даны координаты векторов',\n    'Определить, могут ли две разные матрицы быть матрицами одного линейного оператора в разных базисах',\n    'Найти матрицу линейного оператора проектирования на плоскость в заданном базисе',\n    'Найти собственные векторы и собственные значения линейного оператора заданного матрицей',\n    'Определить Жорданову нормальную форму',\n    'Нахождение Жорданова базиса',\n    'Формула Получение нормали плоскости из уравнения',\n    'Формула Линейного оператора проектирования на плоскость',\n    'Формула характеристического уравнения',\n    'Формула нахождения всех Жордановых клеток, соответствующих собственному значению',\n    'Формула нахождения числа Жордановых клеток определенного порядка',\n    'Формула нахождения Жорданова базиса',\n    'Определить функцию от матрицы с одним собственным значением',\n    'Определить функцию от матрицы с несколькими собственными значениями',\n    'Убедиться, что матрица является корнем своего характеристического многочлена',\n    'Определить минимальный многочлен нормальной Жордановой формы',\n    'Формула нахождения функции от матрицы с одним собственным значением',\n    'Формула нахождения функции от матрицы с несколькими собственными значениями',\n    'Формула нахождения минимального многочлена Жордановой клетки',\n  ],\n}","import { map, omit } from 'lodash';\nimport { vectors } from './vectors';\nimport { linearSpaces } from './linear-spaces';\n\nexport const dictationList = {\n  [vectors.href]: vectors,\n  [linearSpaces.href]: linearSpaces,\n};\nexport const dictationThemesList = map(dictationList, dictation => (\n  omit(dictation, 'questionsList')\n));\n","import { dictationThemesList } from '../../data';\n\nconst initialValues = {\n  linksList: dictationThemesList,\n};\n\nexport const sidebarReducer = (state = initialValues) => state;\n","import * as React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { MAIN_TITLE, MAIN_DESCRIPTION } from './homepage-constants';\n\nexport class HomepageController extends React.PureComponent {\n  render () {\n    return (\n    <Container>\n      <Row>\n        <Col>\n          <h1>{ MAIN_TITLE }</h1>\n          <p>{ MAIN_DESCRIPTION }</p>\n        </Col>\n      </Row>\n    </Container>\n    );\n  }\n}\n","export const MAIN_TITLE = 'Добро пожаловать в Диктанты!';\nexport const MAIN_DESCRIPTION = `\n  Для начала работы, выберите один из пунктов справа и приступайте к диктанту\n`;","import { createSelector } from 'reselect';\nimport { get, shuffle } from 'lodash';\nimport { DICTATION_LIST_STORE_KEY } from './dictation-list-constants';\n\nconst getDictationStore = store => store[DICTATION_LIST_STORE_KEY];\nconst getRouteNameFromOwnProps = (store, ownProps) => get(ownProps, 'match.params.name');\n\nexport const getDictationDataByRoute = createSelector(\n  getDictationStore,\n  getRouteNameFromOwnProps,\n  (dictationStore, pageName) => ({\n    header: get(dictationStore, [pageName, 'label'], ''),\n    questionsList: shuffle(\n      get(dictationStore, [pageName, 'questionsList'], [])\n    ),\n  })\n);\n\n","export const DICTATION_LIST_STORE_KEY = 'dictation-list';\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { getDictationDataByRoute } from './dictation-list-selectors';\nimport { DictationListPropTypes } from './dictation-list-proptypes';\n\nclass DictationListComponent extends React.PureComponent {\n  static propTypes = DictationListPropTypes;\n  \n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <h1>{ this.props.dictationData.header }</h1>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ul>\n              {\n                this.props.dictationData.questionsList.length === 0\n                  ? 'Почему то нет данных'\n                  : this.props.dictationData.questionsList.map(question => (\n                    <li key={question}>\n                      { question }\n                    </li>\n                  ))\n                }\n            </ul>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = createStructuredSelector({\n  dictationData: getDictationDataByRoute,\n});\n\nexport const DictationListController = connect(\n  mapStateToProps\n)(DictationListComponent);\n","import PropTypes from 'prop-types';\n\nconst DictationData = PropTypes.shape({\n  header: PropTypes.string.isRequired,\n  questionsList: PropTypes.arrayOf(\n    PropTypes.string.isRequired\n  ),\n});\n\nexport const DictationListPropTypes = {\n  dictationData: DictationData,\n}","import * as React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { Sidebar } from './modules/sidebar';\nimport { Homepage } from './modules/homepage';\nimport { DictationList } from './modules/dictation-list';\n\nexport class App extends React.PureComponent {\n  render() {\n    return (\n      <Container fluid>\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Row>\n            <Col xs={2}>\n              <Sidebar />\n            </Col>\n            <Col>\n            <Switch>\n              <Route exact path=\"/\" component={Homepage} />\n              <Route exact path=\"/:name\" component={DictationList} />\n            </Switch>\n            </Col>\n          </Row>\n        </BrowserRouter>\n      </Container>\n    );\n  }\n}\n","import { createStore, combineReducers } from 'redux';\nimport { sidebarReducer, SIDEBAR_STORE_KEY } from './modules/sidebar';\nimport { dictationListReducer, DICTATION_LIST_STORE_KEY } from './modules/dictation-list';\n\nconst reducers = {\n  [SIDEBAR_STORE_KEY]: sidebarReducer,\n  [DICTATION_LIST_STORE_KEY]: dictationListReducer,\n};\n\nexport const store = createStore(\n  combineReducers(reducers)\n);","import { dictationList } from '../../data';\n\nexport const dictationListReducer = (state = dictationList) => state;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './reducers';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render((\n    <Provider store={store}>\n      <App />\n    </Provider>\n  ),\n  document.getElementById('root')\n);\n"],"sourceRoot":""}